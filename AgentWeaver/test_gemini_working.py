"""
Test Gemini AI with Agriculture System
"""

import os
import asyncio
import sys
from datetime import datetime

# Set API key
os.environ['GOOGLE_API_KEY'] = 'AIzaSyACHvqkA6UHMcZwSnhSuB50lhrnJzxOAjg'

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

async def test_gemini_with_agriculture():
    print("üß™ Testing Gemini AI with Agriculture System...")
    
    try:
        # Import Gemini
        import google.generativeai as genai
        print("‚úÖ Gemini SDK imported")
        
        # Configure
        genai.configure(api_key=os.environ['GOOGLE_API_KEY'])
        print("‚úÖ API key configured")
        
        # Create model
        model = genai.GenerativeModel("gemini-1.5-flash")
        print("‚úÖ Model created")
        
        # Import agriculture models
        from core.agriculture_models import AgricultureQuery, Language, AgentResponse
        print("‚úÖ Agriculture models imported")
        
        # Test query
        query = AgricultureQuery(
            query_text="‡§Æ‡•á‡§∞‡•á ‡§™‡§æ‡§∏ 2 ‡§π‡•á‡§ï‡•ç‡§ü‡•á‡§Ø‡§∞ ‡§ñ‡•á‡§§ ‡§π‡•à‡•§ ‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§¨‡•Å‡§Ü‡§à ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§π‡•à?",
            query_language=Language.MIXED,
            user_id="test_farmer"
        )
        print("‚úÖ Test query created")
        
        # Generate response
        prompt = f"""
        ‡§Ü‡§™ ‡§è‡§ï ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§π‡•à‡§Ç‡•§
        
        ‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡§æ ‡§∏‡§µ‡§æ‡§≤: {query.query_text}
        
        ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§Ç:
        - ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§î‡§∞ ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞
        - ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•Ä‡§Ø ‡§ï‡§ø‡§∏‡•ç‡§Æ‡•á‡§Ç
        - ‡§≤‡§æ‡§ó‡§§ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®
        - ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§ï‡•Ä ‡§Æ‡§æ‡§Ç‡§ó
        
        ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§î‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§Ç‡•§
        """
        
        response = model.generate_content(prompt)
        print("‚úÖ Gemini response generated")
        
        # Create structured response
        agent_response = AgentResponse(
            agent_id="gemini_agriculture_agent",
            agent_name="Gemini Agriculture Expert",
            query_id=query.query_id,
            response_text=response.text,
            response_language=Language.MIXED,
            confidence_score=0.90,
            recommendations=[{
                "title": "‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§ï‡§ø‡§∏‡•ç‡§Æ ‡§∏‡•Å‡§ù‡§æ‡§µ",
                "description": response.text,
                "priority": "high"
            }],
            timestamp=datetime.now(),
            metadata={"model": "gemini-1.5-flash", "language": "mixed"}
        )
        
        print("\nüéâ SUCCESS! Gemini AI working with agriculture system")
        print(f"Response preview: {response.text[:300]}...")
        print(f"Confidence: {agent_response.confidence_score}")
        print(f"Agent: {agent_response.agent_name}")
        print(f"Language: {agent_response.response_language}")
        print(f"Response length: {len(agent_response.response_text)} characters")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_gemini_with_agriculture())
    exit(0 if success else 1)
