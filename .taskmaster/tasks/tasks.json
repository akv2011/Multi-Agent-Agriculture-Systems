{
  "master": {
    "tasks": [
      {
        "id": 26,
        "title": "Setup Backend Foundation and API Gateway",
        "description": "Initialize the project structure, set up a FastAPI backend, configure the database connection (SQLite for dev, PostgreSQL for prod), and establish the basic API gateway for service coordination.",
        "details": "Create a new Git repository. Set up a Python virtual environment. Install FastAPI, Uvicorn, and SQLAlchemy. Create initial directories for agents, services, and models. Define the base Pydantic models for requests and responses. Configure CORS and basic logging.\n<info added on 2025-08-13T18:31:40.572Z>\n‚úÖ LEVERAGING EXISTING AGENTWEAVER FRAMEWORK\n\nAfter examining the codebase, we already have a sophisticated AgentWeaver framework that provides:\n\nüèóÔ∏è **Already Available Infrastructure:**\n- ‚úÖ FastAPI backend with health checks and CORS (`main.py`)\n- ‚úÖ LangGraph-based SupervisorNode for agent orchestration (`supervisor.py`)\n- ‚úÖ Redis integration for state management (`redis_config.py`)\n- ‚úÖ WebSocket support for real-time updates\n- ‚úÖ React frontend with agent dashboard (`frontend/`)\n- ‚úÖ Base agent architecture with capabilities system (`base_agent.py`)\n- ‚úÖ Agent registry and task management system\n\nüéØ **Task 26 Strategy - Build Upon Existing Foundation:**\nInstead of creating from scratch, we'll:\n1. **Extend AgentWeaver** with agriculture-specific agents\n2. **Add agricultural data models** to the existing core models\n3. **Create specialized agents** that inherit from BaseWorkerAgent\n4. **Integrate multilingual support** into the existing framework\n5. **Add agricultural data sources** to the existing API structure\n\n‚úÖ **Context7 LangChain Documentation Retrieved:**\n- Multi-agent orchestration patterns using LangGraph\n- Agent tool integration and execution patterns\n- State management for complex workflows\n- Migration guidance from legacy AgentExecutor to LangGraph\n\nüöÄ **Next Actions:**\n1. Create agricultural data models (crop, weather, soil, etc.)\n2. Build Router Agent that inherits from BaseWorkerAgent\n3. Create first agricultural specialist agents (Crop Selection, Pest Forecaster)\n4. Add multilingual NLP preprocessing capabilities\n5. Integrate with government data APIs\n\nThis approach leverages existing infrastructure while focusing on agricultural domain specifics.\n</info added on 2025-08-13T18:31:40.572Z>",
        "testStrategy": "Run the FastAPI server locally. Use an API client like Postman or curl to hit a health check endpoint (e.g., `/health`) and verify a 200 OK response. Unit test the initial database connection logic.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "Implement Multi-Agent Router System (Orchestrator)",
        "description": "Develop the central orchestrator using CrewAI or LangChain to parse natural language queries, classify intent, and route them to the appropriate specialist agents.",
        "details": "Choose between CrewAI and LangChain for orchestration. Implement a 'Router' agent responsible for intent classification using few-shot learning with an LLM (e.g., Llama 3 via API). The router should be able to handle parallel and sequential agent execution plans. It must also synthesize responses from multiple agents.",
        "testStrategy": "Unit test the intent classification with a set of sample queries in English, Hindi, and code-switched text. Verify that queries like 'Kab irrigate karun aur finance kaise mile?' are correctly routed to mock 'Irrigation' and 'Finance' agent tasks. Test the response synthesizer with mock agent outputs.",
        "priority": "high",
        "dependencies": [
          26
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "Develop Basic Web Dashboard UI",
        "description": "Create a responsive web dashboard using Streamlit or React that includes a chat interface for user queries and a display area for agent responses.",
        "details": "Set up a Streamlit application. Implement a chat input component and a message history display. Use WebSockets to communicate with the FastAPI backend for real-time interaction. Design a simple layout to show agent routing and final synthesized responses.",
        "testStrategy": "Manually test the UI by sending a message and ensuring it appears in the chat history. Connect to the backend and verify that a query sent from the UI is received by the FastAPI server. Check that responses from the backend are displayed correctly in the UI.",
        "priority": "high",
        "dependencies": [
          26
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 29,
        "title": "Implement Gemini-based Multilingual Query Processing",
        "description": "Leverage Gemini AI's native multilingual capabilities to process Hindi, English, and code-switched queries directly, simplifying the pre-processing pipeline.",
        "status": "done",
        "dependencies": [
          27
        ],
        "priority": "high",
        "details": "Instead of a separate pre-processing pipeline with text normalization and translation, use Gemini AI directly. Craft a system prompt for the orchestrator (Router Agent from Task 27) that instructs Gemini to understand the user's query regardless of the language (Hindi, English, Hinglish) and to process it for intent classification. This approach removes the need for the 'Indic NLP Library' or external translation APIs.",
        "testStrategy": "Create a test suite with a diverse set of Hindi, English, and Hinglish queries. Verify that the Gemini-powered orchestrator correctly understands and classifies the intent of these queries without an explicit pre-processing step. Test edge cases with mixed scripts, dialects, and complex code-switching to ensure robust performance.",
        "subtasks": []
      },
      {
        "id": 30,
        "title": "Develop Crop Selection Agent (Agent 1)",
        "description": "Build the agent to recommend optimal crop varieties based on location, soil, and weather, and provide yield predictions.",
        "details": "Integrate ICRISAT and data.gov.in datasets for crop varieties and historical yields. Develop a simple yield prediction model using scikit-learn (e.g., RandomForestRegressor). The agent's toolset should include functions to query these datasets and models based on user-provided location and soil type.",
        "testStrategy": "Unit test the agent's tools with mock location data. Create integration tests where the agent is invoked by the orchestrator with a query like 'Suggest a crop for my farm in Punjab'. Verify the response includes variety names, expected yield, and risk factors.",
        "priority": "high",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 31,
        "title": "Develop Pest Outbreak Forecaster Agent (Agent 2)",
        "description": "Create the agent to identify pests from descriptions, forecast outbreaks, and recommend treatments. This task focuses on text-based identification and forecasting.",
        "details": "Build a knowledge base from PlantNet and Kisan Call Center data, storing it in a FAISS vector store for retrieval. Implement a time-series model (e.g., LSTM using TensorFlow/PyTorch) for outbreak forecasting based on weather data. The agent will use RAG to answer pest queries.",
        "testStrategy": "Test the RAG system with text descriptions of common pests (e.g., 'white flies on my cotton plant'). Validate the treatment recommendations against agricultural guidelines. Test the forecasting model with historical weather data to see if it predicts known outbreak periods.",
        "priority": "high",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 32,
        "title": "Develop Irrigation Scheduling Agent (Agent 4)",
        "description": "Build the agent to calculate crop water requirements and create optimal irrigation schedules using meteorological and soil data.",
        "details": "Implement the Penman-Monteith equation using the `sympy` library to calculate evapotranspiration (ET). Integrate with the IMD weather API for real-time temperature, humidity, and wind speed data. The agent will take crop type and growth stage as input to generate a daily/weekly watering schedule.",
        "testStrategy": "Validate the Penman-Monteith calculation against known benchmarks. Test the weather API integration for reliability. Run an end-to-end test with a query like 'When should I water my wheat crop?' and verify the output is a coherent schedule.",
        "priority": "high",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 33,
        "title": "Integrate Phase 1 Agents with Orchestrator",
        "description": "Connect the Crop Selection, Pest Forecaster, and Irrigation agents to the central router and ensure seamless end-to-end query processing for the initial MVP scope.",
        "details": "Register the three developed agents and their tools with the CrewAI/LangChain orchestrator. Refine the router's intent detection prompts to accurately distinguish between queries for these three domains. Test complex queries that require multiple agents.",
        "testStrategy": "Perform integration testing with queries like 'My wheat crop looks stressed, what pest could it be and how much water does it need?'. Verify that the orchestrator correctly calls the Pest and Irrigation agents and synthesizes their responses into a single, helpful answer.",
        "priority": "high",
        "dependencies": [
          28,
          30,
          31,
          32
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 34,
        "title": "Setup Satellite Data Acquisition Pipeline (PoC)",
        "description": "Implement a proof-of-concept pipeline to automatically acquire, preprocess, and store satellite imagery metrics like NDVI for specific locations.",
        "details": "Use the Sentinel Hub API (free tier) to fetch Sentinel-2 imagery for given coordinates. Use Rasterio and GDAL libraries to process the raster data. Calculate NDVI using NumPy. Store the processed metric (e.g., average NDVI for a farm area) in the database, linked to a location and date.",
        "testStrategy": "Write a script that takes latitude/longitude as input and successfully downloads an image tile. Verify the NDVI calculation is correct by comparing with a known online tool. Check that the resulting data is correctly stored in the database.",
        "priority": "medium",
        "dependencies": [
          26
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 35,
        "title": "Integrate Satellite Data into Agent Decisions",
        "description": "Enhance the Irrigation and Crop Selection agents to use processed satellite data (NDVI, soil moisture) as part of their decision-making process.",
        "details": "Create a new tool for agents to query the satellite data from the database based on a user's farm location. Modify the Irrigation agent's logic to adjust water recommendations based on soil moisture data. Modify the Crop Selection agent to use NDVI for assessing current land health.",
        "testStrategy": "Test the Irrigation agent with and without satellite data to see if the recommendations change logically. Manually verify that the agent is fetching and using the correct NDVI/soil moisture values for a given location during a query.",
        "priority": "medium",
        "dependencies": [
          33,
          34
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 36,
        "title": "Develop Finance and Policy Agent (Agent 3)",
        "description": "Build the agent to simulate eligibility for agricultural loans and government subsidies using a rule-based engine.",
        "details": "Gather data on schemes like PM-KISAN and agricultural loans from Open Budgets India and bank websites. Implement a rule-based engine using Python logic or a library like `durable_rules`. The agent will ask the user clarifying questions (e.g., land size, crop type) to determine eligibility.",
        "testStrategy": "Create test cases for different farmer profiles (e.g., small-scale, medium-scale, different states). Verify that the agent correctly identifies applicable schemes and calculates eligibility based on the defined rules. Compare results against official government eligibility checkers.",
        "priority": "medium",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 37,
        "title": "Develop Market Timing Agent (Agent 5)",
        "description": "Create the agent to forecast commodity prices and recommend optimal selling times using time-series analysis.",
        "details": "Integrate with the UPAg market price API to fetch historical price data for various commodities and mandis. Implement a price forecasting model using Prophet or ARIMA from the `statsmodels` library. The agent's output should include a price forecast chart and confidence intervals.",
        "testStrategy": "Train the model on historical data and test its forecasting accuracy on a hold-out set. Test the API integration to ensure it can fetch data for different crops and markets. Verify the agent provides a clear recommendation (e.g., 'Sell now', 'Wait 2 weeks').",
        "priority": "medium",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 38,
        "title": "Develop Harvest Planning Agent (Agent 6)",
        "description": "Build the agent to determine optimal harvest dates by modeling crop calendars and integrating weather forecasts.",
        "details": "Create a database of crop growth stages and typical durations (crop calendars). Integrate a weather forecast API to assess risks (e.g., rain) around the potential harvest window. The agent will combine the crop calendar with weather data to recommend a specific harvest date or week.",
        "testStrategy": "Test with different crops and planting dates. Verify that the agent's recommended harvest date aligns with the crop calendar. Introduce a mock weather forecast with rain and check if the agent adjusts its recommendation to avoid it.",
        "priority": "medium",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 39,
        "title": "Develop Input Materials Advisor (Agent 7)",
        "description": "Build the agent to recommend optimal and cost-effective fertilizers, seeds, and pesticides.",
        "details": "Use the PuLP library for optimizing fertilizer combinations based on soil test results and nutrient requirements. Integrate with a chemical database like PubChemPy for pesticide information. Create a simple scoring algorithm for seed quality based on certification data.",
        "testStrategy": "Unit test the PuLP optimization with a sample soil report to ensure it generates a cost-effective fertilizer mix. Test the pesticide recommendation tool to verify it suggests appropriate and safe products for a given pest and crop.",
        "priority": "medium",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 40,
        "title": "Implement Computer Vision for Pest ID",
        "description": "Enhance the Pest Forecaster agent with a computer vision model to identify pests from user-submitted photos.",
        "details": "Fine-tune a lightweight CV model like MobileNetV2 on a pest image dataset (e.g., from PlantVillage). Expose this model as a tool that the Pest agent can use. The tool will take an image URL or a base64 encoded image and return a list of potential pests with confidence scores.",
        "testStrategy": "Test the image processing endpoint with a set of test images of common pests. Measure the model's identification accuracy (precision/recall). Integrate with the agent and verify that a query with an image correctly triggers the vision tool.",
        "priority": "medium",
        "dependencies": [
          31
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 41,
        "title": "Implement Explainable AI (XAI) and Confidence Scoring",
        "description": "Modify all agents to provide explanations for their recommendations, including cited sources and a confidence score.",
        "details": "Update the base agent class or prompt templates to require a 'reasoning' and 'confidence_score' field in the output. For RAG-based agents, the reasoning should include the source documents. For model-based agents, it should explain the key features that influenced the decision. Confidence scores can be derived from model probabilities or rule-based certainty.",
        "testStrategy": "Review the output of each agent for a variety of queries. Verify that every recommendation is accompanied by a clear explanation and a numerical confidence score (e.g., 0.85). Check that cited sources are relevant and accurate.",
        "priority": "medium",
        "dependencies": [
          33,
          36,
          37,
          38,
          39
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 42,
        "title": "Implement User Onboarding and Profile Management",
        "description": "Create the user flow for new user onboarding, including language selection, location input, and farm details collection.",
        "details": "Develop a multi-step form in the web UI for onboarding. Create backend endpoints and database tables to store user profiles, including farm location (GeoJSON), primary crops, and language preference. This data should be loaded into the agent context for personalized responses.",
        "testStrategy": "Manually go through the onboarding flow as a new user. Check the database to ensure the profile is created correctly. Start a new chat session and verify that the agent context is pre-populated with the user's farm location and preferences.",
        "priority": "low",
        "dependencies": [
          28
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 43,
        "title": "End-to-End MVP System Testing",
        "description": "Conduct comprehensive testing of the fully integrated 7-agent system. Focus on performance, accuracy, and user experience across all features.",
        "details": "Develop a test plan covering all major use cases from the PRD. Perform load testing to check response times under concurrent user load (target <10s for complex queries). Recruit a small group of internal testers (including agricultural domain experts) to validate the quality of recommendations.",
        "testStrategy": "Execute the test plan and log all bugs and issues. Measure key metrics: query response time, intent classification accuracy, and recommendation relevance (as rated by experts). The system passes when critical/high bugs are resolved and performance targets are met.",
        "priority": "high",
        "dependencies": [
          35,
          40,
          41,
          42
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 44,
        "title": "Basic WhatsApp Integration (PoC)",
        "description": "Set up a proof-of-concept WhatsApp bot that forwards user queries to the main backend system and returns the response.",
        "details": "Use the WhatsApp Business API via a provider like Twilio. Create a simple webhook endpoint on the FastAPI backend to receive incoming messages. This endpoint will pass the query to the agent orchestrator and send the final synthesized response back to the user via the WhatsApp API.",
        "testStrategy": "Send a message to the WhatsApp bot number. Verify the message is received by the backend. Check that the agent's response is sent back to the user on WhatsApp. Test basic text queries and image submissions for pest identification.",
        "priority": "low",
        "dependencies": [
          43
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 45,
        "title": "Setup CI/CD and MVP Deployment Infrastructure",
        "description": "Configure a basic Continuous Integration/Continuous Deployment pipeline and prepare the infrastructure for MVP deployment on a cloud provider.",
        "details": "Create a GitHub Actions workflow to automatically run tests on every push. Write a Dockerfile for the backend application. Use a simple platform like Heroku or Vercel for web UI deployment and a small cloud VM (e.g., AWS EC2, GCP Compute Engine) for the backend. Set up basic monitoring and logging (e.g., AWS CloudWatch).",
        "testStrategy": "Push a small change to the repository and verify that the CI pipeline runs successfully. Manually trigger a deployment to the staging environment. Access the deployed application URL and confirm it is operational.",
        "priority": "medium",
        "dependencies": [
          43
        ],
        "status": "todo",
        "subtasks": []
      },
      {
        "id": 46,
        "title": "Expand Satellite Data Integration to Core Agricultural Agents",
        "description": "Enhance the Pest Management, Finance, Market Timing, Harvest Planning, and Input Materials agents by integrating satellite-derived data like NDVI, soil moisture, and weather for more accurate and timely recommendations.",
        "details": "This task involves extending the satellite data capabilities established in Task 35 to a wider range of agents. The existing satellite data tool should be generalized to fetch not only NDVI and soil moisture but also relevant weather data (e.g., temperature, precipitation, humidity) from a suitable API.\n\nImplementation per agent:\n- **Pest Management Agent**: Modify the agent to use weather data for improved pest outbreak forecasting. Integrate NDVI data to help users identify and scout stressed areas of a field, which could indicate early-stage infestations.\n- **Finance Agent**: Enhance financial models to use historical and current NDVI data as a proxy for yield estimation, improving the accuracy of revenue forecasts and loan risk assessments.\n- **Market Timing Agent**: Augment the agent's logic to analyze regional NDVI data to estimate crop supply trends. Use weather forecasts to predict potential harvest or logistics disruptions that could impact market prices.\n- **Harvest Planning Agent**: Use time-series NDVI data to monitor crop maturity and field uniformity, enabling recommendations for the optimal harvest window. The agent should also use short-term weather forecasts to advise against harvesting during adverse conditions.\n- **Input Materials Agent (from Task 39)**: Refine the agent's recommendations by using soil moisture data to optimize the timing of fertilizer application and prevent runoff. Use NDVI maps to suggest variable-rate application strategies, targeting nutrients to specific areas of need.",
        "testStrategy": "1. **Unit Test Data Tool**: Verify the generalized satellite data tool can successfully fetch NDVI, soil moisture, and weather data for a given set of coordinates and date range.\n2. **Pest Agent Test**: Provide the agent with weather data known to favor a specific pest and confirm it generates a high-risk alert. Provide a field with a known low-NDVI spot and verify the agent suggests scouting that specific area.\n3. **Finance Agent Test**: Run a financial forecast for a farm with high historical NDVI and another with low historical NDVI. Verify the projected yield and revenue are appropriately higher for the former.\n4. **Market Timing Test**: Simulate a scenario with high regional NDVI (indicating high supply) and verify the agent's market timing advice adjusts accordingly (e.g., sell earlier).\n5. **Harvest Planning Test**: Input NDVI data showing non-uniform crop maturity and check that the agent recommends a staggered harvesting approach. Input a 3-day forecast with rain and verify the agent advises against harvesting on the rainy days.\n6. **Input Materials Agent Test**: Query for fertilizer advice with low soil moisture data and verify the agent adjusts its recommendation. Provide a field with variable NDVI and confirm the agent suggests a variable-rate application plan.",
        "status": "pending",
        "dependencies": [
          34,
          35,
          39
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 47,
        "title": "Enhance Market Timing Agent with Satellite Data Integration",
        "description": "Integrate satellite data into the Market Timing Agent to enable NDVI-based yield forecasting, environmental risk assessment, and satellite-adjusted price predictions for more accurate recommendations.",
        "details": "This task enhances the Market Timing Agent (Task 37) by incorporating satellite-derived metrics. Key implementation steps include:\n1. **Yield Forecasting Model**: Develop a model that uses time-series NDVI data from the acquisition pipeline (Task 34) to forecast crop yields for a user's specific location.\n2. **Risk Assessment Module**: Analyze satellite data (e.g., soil moisture, temperature anomalies) to quantify environmental risks like drought or heat stress that could impact supply.\n3. **Price Model Enhancement**: Modify the agent's existing price forecasting model (e.g., Prophet/ARIMA) to use the new yield forecasts and risk assessments as input features, creating a more robust supply-demand model.\n4. **Confidence Interval Calculation**: Ensure the agent's final recommendation ('Sell', 'Wait') is accompanied by a statistically derived confidence level (target 95%) based on the prediction intervals of the enhanced model.",
        "testStrategy": "1. **Yield Model Validation**: Test the yield forecasting model against a hold-out dataset of historical NDVI and known yield data. Ensure the Mean Absolute Percentage Error (MAPE) is below an acceptable threshold.\n2. **Price Model Backtesting**: Compare the forecasting accuracy (RMSE/MAPE) of the satellite-enhanced price model against the baseline model from Task 37 on historical data. The new model must demonstrate a significant improvement.\n3. **Scenario Testing**: Create test cases with high-risk environmental data (e.g., simulated drought) and verify the agent adjusts its price predictions and recommendations appropriately.\n4. **End-to-End Integration Test**: For a given location, confirm the agent successfully queries the generalized satellite data tool (from Task 46), processes it through the yield and price models, and returns a coherent recommendation with the correct confidence score.",
        "status": "done",
        "dependencies": [
          37,
          34,
          46
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 48,
        "title": "Market Timing Agent Satellite Integration - COMPLETED",
        "description": "Successfully integrated satellite data into Market Timing Agent for advanced yield forecasting and market intelligence",
        "details": "",
        "testStrategy": "",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-13T17:08:38.099Z",
      "updated": "2025-08-14T21:45:36.469Z",
      "description": "Tasks for master context"
    }
  }
}